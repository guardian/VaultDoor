# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                           @controllers.Application.index

GET     /stream/:targetUriString                    @controllers.Application.streamTargetContent(targetUriString)
HEAD    /stream/:targetUriString                    @controllers.Application.headTargetContent(targetUriString)
GET     /api/config                                 @controllers.Application.frontendConfig

POST    /api/logout                                 @controllers.Login.logout
GET     /api/isLoggedIn                             @controllers.Login.isLoggedIn
GET     /api/isAdmin                                @controllers.Login.checkIsAdmin

GET     /audit/scan                                 @controllers.AuditController.getAll(limit:Option[Int])

GET     /api/vault                                  @controllers.VaultController.knownVaults()
GET     /api/vault/:vaultId/findDuplicates          @controllers.VaultController.findDuplicates(vaultId)
GET     /api/metadata/knownTypes                    @controllers.FileListController.getValidTypes
GET     /api/vault/:vaultId/testFastSearch          @controllers.FileListController.testFastSearch(vaultId, field:String,value:String, quoted:Boolean?=false)
GET     /api/vault/:vaultId/list                    @controllers.FileListController.pathSearchStreaming(vaultId, forFile:Option[String], sortField:Option[String], sortDir:Option[String], typeFilter:Option[String])
GET     /api/vault/:vaultId/byProject/:projectId    @controllers.FileListController.projectSearchStreaming(vaultId, projectId)
PUT     /api/vault/:vaultId/list                    @controllers.FileListController.customSearchStreaming(vaultId)
GET     /api/vault/:vaultId/summary                 @controllers.FileListController.vaultSummary(vaultId)
GET     /api/vault/:vaultId/projectSummary/:projectId @controllers.FileListController.projectsummary(vaultId, projectId)

HEAD    /api/vault/:vaultId/:oid                    @controllers.VaultController.headTargetContent(vaultId, oid)
GET     /api/vault/:vaultId/:oid/token              @controllers.VaultController.createSingleDownloadToken(vaultId, oid)
GET     /api/rawdownload/:token                     @controllers.VaultController.singleTokenDownload(token)

# these endpoints mirror ArchiveHunter so that the protocol used by DownloadManager works
GET     /api/bulk/new/:vaultId/:projectId           @controllers.BulkDownloadController.initiate(vaultId, projectId)
GET     /api/bulk/:codeValue                        @controllers.BulkDownloadController.getBulkDownload(codeValue, notOnlyRushes:Option[Boolean])
GET     /api/bulkv2/:codeValue                      @controllers.BulkDownloadController.getBulkDownload(codeValue, notOnlyRushes:Option[Boolean])
GET     /api/bulk/:tokenValue/get/:fileId           @controllers.BulkDownloadController.bulkDownloadItem(tokenValue, fileId)
GET     /api/bulk/:tokenValue/get/:fileId/data      @controllers.BulkDownloadController.bulkDownloadItemData(tokenValue, fileId)

GET     /meta/oauth/config.json                     @controllers.OAuthMetaController.oauthConfig
GET     /meta/oauth/publickey.pem                   @controllers.OAuthMetaController.signingKey

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /*tail                      @controllers.UiController.index(tail)